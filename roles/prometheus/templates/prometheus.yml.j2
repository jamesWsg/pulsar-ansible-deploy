#
# Copyright (c) 2018 Sijie. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.
  evaluation_interval: 15s # By default, scrape targets every 15 seconds.
  # scrape_timeout is set to the global default (10s).
  external_labels:
    cluster: '{{ cluster_name }}'
{% for item in prometheus_extra_labels %}
    {{ item.label }}: "{{ item.value }}"
{% endfor %}

# Load and evaluate rules in these files every 'evaluation_interval' seconds.
# rule_files:

# generate pushgateway host
{% set pushgateway_host = hostvars[groups.pushgateway[0]].ansible_host | default(hostvars[groups.pushgateway[0]].inventory_hostname)
    if groups.get('pushgateway', []) else '' -%}
{% set pushgateway_port = hostvars[groups.pushgateway[0]].pushgateway_port if pushgateway_host else '' -%}

# generate grafana port
{% set grafana_host = hostvars[groups.grafana[0]].ansible_host | default(hostvars[groups.grafana[0]].inventory_hostname)
    if groups.get('grafana', []) else '' -%}
{% set grafana_port = hostvars[groups.grafana[0]].grafana_port if grafana_host else '' -%}

# generate blackbox host & port
{% set blackbox_host = hostvars[groups.monitored_hosts[0]].ansible_host | default(hostvars[groups.monitored_hosts[0]].inventory_hostname) if groups.get('monitored_hosts', []) else '' -%}
{% set blackbox_port = hostvars[groups.monitored_hosts[0]].blackbox_exporter_port if blackbox_host else '' -%}

# generate node_exporter hosts
{% set node_exporter_addrs = [] -%}
{% set blackbox_exporter_addrs = [] -%}
{% set target_hosts = [] -%}
{% for host in groups.monitored_hosts -%}
  {% set host_ip = hostvars[host].ansible_host | default(hostvars[host].inventory_hostname) -%}
  {% set node_exporter_port = hostvars[host].node_exporter_port -%}
  {% set blackbox_exporter_port = hostvars[host].blackbox_exporter_port -%}
  {% set _ = node_exporter_addrs.append("%s:%s" % (host_ip, node_exporter_port)) -%}
  {% set _ = blackbox_exporter_addrs.append("%s:%s" % (host_ip, blackbox_exporter_port)) -%}
  {% set _ = target_hosts.append(host_ip) -%}
{% endfor -%}

# generate zookeeper hosts
{% set zk_addrs = [] -%}
{% for host in groups.zookeeper -%}
  {% set zk_ip = hostvars[host].ansible_host | default(hostvars[host].inventory_hostname) -%}
  {% set zk_port = hostvars[host].zk_http_port -%}
  {% set _ = zk_addrs.append("%s:%s" % (zk_ip, zk_port)) -%}
{% endfor -%}

# generate bookie hosts
{% set bookie_addrs = [] -%}
{% for host in groups.bookies -%}
  {% set bookie_ip = hostvars[host].ansible_host | default(hostvars[host].inventory_hostname) -%}
  {% set _ = bookie_addrs.append("%s:%s" % (bookie_ip, bookie_http_port)) -%}
{% endfor -%}

# generate broker hosts
{% set broker_addrs = [] -%}
{% for host in groups.brokers -%}
  {% set broker_ip = hostvars[host].ansible_host | default(hostvars[host].inventory_hostname) -%}
  {% set _ = broker_addrs.append("%s:%s" % (broker_ip, broker_http_port)) -%}
{% endfor -%}

# generate proxy hosts
{% set proxy_addrs = [] -%}
{% for host in groups.proxies -%}
  {% set proxy_ip = hostvars[host].ansible_host | default(hostvars[host].inventory_hostname) -%}
  {% set _ = proxy_addrs.append("%s:%s" % (proxy_ip, proxy_http_port)) -%}
{% endfor -%}

scrape_configs:

  - job_name: "proxy"
    honor_labels: true # don't overwrite job & instance labels
    static_configs:
    - targets:
{% for proxy_addr in proxy_addrs %}
      - '{{ proxy_addr }}'
{% endfor %}

  - job_name: "broker"
    honor_labels: true # don't overwrite job & instance labels
    static_configs:
    - targets:
{% for broker_addr in broker_addrs %}
      - '{{ broker_addr }}'
{% endfor %}

  - job_name: "bookie"
    honor_labels: true # don't overwrite job & instance labels
    static_configs:
    - targets:
{% for bookie_addr in bookie_addrs %}
      - '{{ bookie_addr }}'
{% endfor %}

  - job_name: "zookeeper"
    honor_labels: true
    static_configs:
    - targets:
{% for zk_addr in zk_addrs %}
      - '{{ zk_addr }}'
{% endfor %}

{% if pushgateway_host %}
  - job_name: "blackbox_exporter_http"
    scrape_interval: 30s
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
    - targets:
      - 'http://{{ pushgateway_host }}:{{ pushgateway_port }}/metrics'
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ blackbox_host }}:{{ blackbox_port }}
{% endif %}

  - job_name: "node_metrics"
    honor_labels: true # don't overwrite job & instance labels
    static_configs:
    - targets:
{% for node_exporter_addr in node_exporter_addrs %}
      - '{{ node_exporter_addr }}'
{% endfor %}
